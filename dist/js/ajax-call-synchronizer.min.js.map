{"version":3,"file":"ajax-call-synchronizer.min.js","sources":["ajax-call-synchronizer.js"],"sourcesContent":["// This function is used for delay calling an api.\r\n// It works as a debounce available in other JS libraries.\r\n// the only difference is, you call execute() function with new parameters\r\n// to call the pre configured function unlike debounce options.\r\n\r\n/*\r\n\t\r\nvar operation = AjaxCallSynchronizer({\r\n\t0,\r\n\tfunction(param0, param1) {\r\n\t}\r\n});\r\n\r\noperation('1', '2');\r\n\r\n*/\r\n\r\n;function AjaxCallSynchronizer(options) {\r\n  'use strict';\r\n\r\n  this.execute = execute;\r\n\r\n  var defaults = {\r\n    apiRequestDelay: 0,\r\n    apiRequest: undefined\r\n  };\r\n\r\n  var local = {\r\n    settings: {},\r\n    timer: undefined\r\n  };\r\n\r\n  local.settings = $.extend(true, {}, defaults, options);\r\n\r\n  function execute() {\r\n\r\n    if (local.timer) {\r\n      clearTimeout(local.timer);\r\n    }\r\n\r\n    var executeArgs = Array.prototype.slice.call(arguments);\r\n\r\n    var closure = (function (args) {\r\n      return function () {\r\n        local.timer = undefined;\r\n        local.settings.apiRequest.apply(this, args);\r\n      }\r\n    })(executeArgs);\r\n\t\r\n    local.timer = setTimeout(closure, local.settings.apiRequestDelay);\r\n  }\r\n\r\n}\r\n"],"names":["AjaxCallSynchronizer","options","this","execute","local","timer","clearTimeout","closure","args","undefined","settings","apiRequest","apply","Array","prototype","slice","call","arguments","setTimeout","apiRequestDelay","$","extend"],"mappings":"AAiBC,SAASA,qBAAqBC,gBAG7BC,KAAKC,QAcL,WAEMC,EAAMC,OACRC,aAAaF,EAAMC,OAGrB,IAEIE,EAAU,SAAWC,GACvB,OAAO,WACLJ,EAAMC,WAAQI,EACdL,EAAMM,SAASC,WAAWC,MAAMV,KAAMM,IAH5B,CAFIK,MAAMC,UAAUC,MAAMC,KAAKC,YAS7Cb,EAAMC,MAAQa,WAAWX,EAASH,EAAMM,SAASS,kBA3BnD,IAKIf,EAAQ,CACVM,SAAU,GACVL,WAAOI,GAGTL,EAAMM,SAAWU,EAAEC,QAAO,EAAM,GAVjB,CACbF,gBAAiB,EACjBR,gBAAYF,GAQgCR"}